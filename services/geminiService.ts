/**
 * --- IMPORTANT SECURITY NOTE ---
 * The Gemini API key MUST NOT be exposed on the client side.
 * This function simulates a call to a secure backend endpoint (e.g., a Next.js API route or a Supabase Edge Function)
 * where the Gemini API call is made safely on the server.
 */

export const generateSummary = async (content: string): Promise<string> => {
  // In a real application, you would make a POST request to your own backend:
  /*
  const response = await fetch('/api/summary', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ content }),
  });
  if (!response.ok) {
    const error = await response.json();
    throw new Error(error.message || 'Failed to generate summary.');
  }
  const data = await response.json();
  return data.summary;
  */

  // For demonstration purposes, we'll simulate the API call and return a mock summary.
  console.log("Simulating backend call to generate summary for content:", content.substring(0, 50) + "...");
  
  // Simulate network delay
  await new Promise(resolve => setTimeout(resolve, 1500));
  
  if (content.length < 20) {
      return "Content is too short to generate a meaningful summary.";
  }

  return `This is a simulated AI summary. In a real app, this text would be generated by the Gemini API on a secure server based on the post content. The summary would capture the key points of the article effectively.`;
};

/*
 * --- EXAMPLE BACKEND IMPLEMENTATION (e.g., in /api/summary) ---
 *
 * import { GoogleGenAI } from "@google/genai";
 *
 * const ai = new GoogleGenAI({ apiKey: process.env.GEMINI_API_KEY });
 *
 * export async function POST(request) {
 *   try {
 *     const { content } = await request.json();
 *     if (!content) {
 *       return new Response(JSON.stringify({ message: 'Content is required.' }), { status: 400 });
 *     }
 *
 *     const prompt = `Summarize the following blog post content in a concise paragraph (around 50-70 words). Capture the main idea and key takeaways. Here is the content:\n\n---\n\n${content}`;
 *
 *     const response = await ai.models.generateContent({
 *       model: 'gemini-2.5-flash',
 *       contents: prompt,
 *     });
 *
 *     const summary = response.text;
 *     return new Response(JSON.stringify({ summary }), { status: 200 });
 *
 *   } catch (error) {
 *     console.error("Error generating summary:", error);
 *     return new Response(JSON.stringify({ message: 'Internal Server Error' }), { status: 500 });
 *   }
 * }
 */
